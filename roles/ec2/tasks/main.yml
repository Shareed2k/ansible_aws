---
# tasks file for ec2
# security gruop for swarm ports
# and we will use static ip to 
# connect by ssh only from it

- name: Create a security group
  ec2_group:
    name: "swarm sg"
    description: Security Group for swarm server
    vpc_id: "{{ vpc_id }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 943
        to_port: 943
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 2377
        to_port: 2377
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 7946
        to_port: 7946
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 7946
        to_port: 7946
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 4789
        to_port: 4789
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 4789
        to_port: 4789
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: swarm_sg

- name: Set Swarm SG ID
  set_fact:
    swarm_sg_id: "{{ swarm_sg.group_id }}"

# Lets create private key if not exist

- name: Create an EC2 key
  ec2_key:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "swarm-key"
    region: "{{ aws_region }}"
  register: ec2_key

- debug: var=ec2_key

# neew to store private key in user home .ssh dir
# for feuter use

- name: save private key
  copy: content="{{ ec2_key.key.private_key }}" dest="$HOME/.ssh/aws-swarm-private.pem" mode=0600
  when: ec2_key.changed

# Now we will create ec2 instance 
# and we gonna use openvpn instance from aws market

- name: Create swarm servers instances
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    key_name: "swarm-key"
    group_id: "{{ swarm_sg_id }}"
    instance_type: c3.xlarge
    image: "ami-405f7226"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ public_subnet_id }}"
    assign_public_ip: yes
    wait: true
    instance_tags:
      Name: "Swarm {{ vpc_name }}"
    count_tag: 
      Name: "Swarm {{ vpc_name }}"
    count: 3
    volumes: 
     - device_name: /dev/sda1
       device_type: gp2
       volume_size: 20
       delete_on_termination: true
  register: ec2

- debug: var=ec2

- name: Add new instances to host group
  add_host:
    groups: ec2hosts
    name: "{{ item.public_dns_name }}"
    ec2_id: "{{ item.id }}"
  with_items: "{{ ec2.instances }}"

- name: Wait for instance to boot
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    delay: 30
    timeout: 300
    state: started
  with_items: "{{ ec2.instances }}"